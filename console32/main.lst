Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/27/16 18:15:32
main.asm						     Page 1 - 1


				.586
				.MODEL FLAT	; only 32 bit addresses, no segment:offset

				.STACK 4096	   ; allocate 4096 bytes for the stack

 00000000			.DATA
					
					; We are using DWORD sizes, because we are using the cdecl protocol, which requires DWORDs on the stack.
					; We are using unsing unsigned because the problem says the two numbers are positive
					
 00000000 00000015			number1 DWORD 21
 00000004 00000031			number2 DWORD 49

 00000000			.CODE
 00000000			main PROC
					
					; CONTENTS OF REGISTERS HERE...

					; call gcdProc(number1, number2)
					; set up parameters (push in reverse order)

 00000000  A1 00000004 R		mov eax, number2
 00000005  50				push eax
 00000006  A1 00000000 R		mov eax, number1
 0000000B  50				push eax

 0000000C  E8 00000008			call gcdProc
					
					; remove parameters from stack
 00000011  5B				pop ebx
 00000012  5B				pop ebx									; ebx is trash

					; MUST BE THE SAME HERE (except for eax)

					; eax now holds gcd

 00000013  B8 00000000			mov eax, 0								; exit with return code 0
					
 00000018  C3				ret
 00000019			main ENDP

				; gcdProc(number1, number2)
 00000019			gcdProc PROC
					
 00000019  55				push ebp				; save old ebp so I can use it for accessing parameters
 0000001A  8B EC			mov ebp, esp			; establish access to parameters

					; save the registers we will use in this procedure
 0000001C  53				push ebx
 0000001D  51				push ecx
					; no need to push eax, we will be using it to return the value of gcd

					; LOGIC
					; gcd := number1
					; remainder := number2
					; loopStart
					;   dividend := gcd
					;   gcd := remainder
					;   remainder := dividend mod gcd
					; until(remainder = 0)

					; We are using DWORD sizes, because the problem spec says to.
					; ebx = gcd
					; ecx = remainder
					; eax = dividend

					; Get values from parameters
 0000001E  8B 5D 0C			mov ebx, DWORD PTR [ebp + 4 * 3]	; gcd := number1
 00000021  8B 4D 08			mov ecx, DWORD PTR [ebp + 4 * 2]	; remainder := number2

 00000024			loopStart:
 00000024  8B C3			mov eax, ebx			; dividend := gcd
 00000026  8B D9			mov ebx, ecx			; gcd := remainder
					
 00000028  BA 00000000			mov edx, 0				; EDX will be used as the higher order bits for the dividend
											; we must set EDX to 0 before dividing because the higher order bits are not significant
 0000002D  F7 F3			div ebx					; divide dividend by gcd (to get dividend mod gcd)
 0000002F  8B CA			mov ecx, edx			; remainder := dividend mod gcd
 00000031  83 F9 00			cmp ecx, 0				; remainder = 0?
 00000034  75 EE			jnz loopStart			; if (remainder != 0) goto loopStart
 00000036			loopEnd:
					
 00000036  8B C3			mov eax, ebx			; move gcd to eax for return

					; restore register values (pop in reverse order)
 00000038  59				pop ecx
 00000039  5B				pop ebx
 0000003A  5D				pop ebp

					; return to caller
 0000003B  C3				ret

 0000003C			gcdProc ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/27/16 18:15:32
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000008 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000003C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

gcdProc  . . . . . . . . . . . .	P Near	 00000019 _TEXT	Length= 00000023 Public
  loopStart  . . . . . . . . . .	L Near	 00000024 _TEXT	
  loopEnd  . . . . . . . . . . .	L Near	 00000036 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000019 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
number1  . . . . . . . . . . . .	DWord	 00000000 _DATA	
number2  . . . . . . . . . . . .	DWord	 00000004 _DATA	

	   0 Warnings
	   0 Errors
